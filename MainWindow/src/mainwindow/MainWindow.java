/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainwindow;

import interfaces.IIDEFactory;
import interfaces.ISyntaxHighlighter;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
/**
 *
 * @author luisborges
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        this.myFactory = null;
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        compileItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        menuFile.setText("File");
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });

        openItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open-16x16.png"))); // NOI18N
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        menuFile.add(openItem);

        exitItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit-16x16.png"))); // NOI18N
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        menuFile.add(exitItem);

        jMenuBar1.add(menuFile);

        menuTools.setText("Tools");

        compileItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/build-16x16.png"))); // NOI18N
        compileItem.setText("Compile");
        compileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileItemActionPerformed(evt);
            }
        });
        menuTools.add(compileItem);

        jMenuBar1.add(menuTools);

        jMenu1.setText("Help");

        jMenuItem3.setText("luisborges@ifba.edu.br");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuFileActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = jfc.getSelectedFile();    
            extensionFile = selectedFile.getName().split("\\.")[1];
            //minhaFabrica = null;
            for (IIDEFactory factory : factories){
                for (String supportedExtension : factory.supportedExtensions()) {
                    if (supportedExtension.equals(extensionFile)) {
                        myFactory = factory;
                        break;
                    }
                }
            }
            if (myFactory != null) {             
                ISyntaxHighlighter highlighter = myFactory.createSyntaxHighligher();
                try {                
                    byte[] data;
                    try (FileInputStream fis = new FileInputStream(selectedFile)) {
                        data = new byte[(int) selectedFile.length()];
                        fis.read(data);
                    }
                    highlighter.setText(new String(data, StandardCharsets.UTF_8));     
                } catch (FileNotFoundException ex) {       
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {     
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                setContentPane(highlighter);
                pack();
            } else {
                JOptionPane.showMessageDialog(jPanel1, "Não há fábrica para a extensão de arquivo (." + extensionFile + ").");               
            }
        }
    }//GEN-LAST:event_openItemActionPerformed

    private void compileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileItemActionPerformed
               myFactory.createCompiler().compile(selectedFile);
    }//GEN-LAST:event_compileItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        this.dispose();
    }//GEN-LAST:event_exitItemActionPerformed
    
    /**
     * @param args the command line arguments
     * @throws java.net.MalformedURLException
     * @throws java.lang.ClassNotFoundException
     * @throws java.lang.InstantiationException
     * @throws java.lang.IllegalAccessException
     */
    public static void main(String args[]) throws MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        File currentDir = new File("./plugins");
        String[] plugins = currentDir.list();
        int pluginLength;
        pluginLength = plugins.length;
        if(pluginLength != 0)
            System.out.println(pluginLength + " Plugins were found:\n");
        
        URL[] jars;
        jars = new URL[pluginLength];

        for(int i = 0; i < plugins.length; i++){
            System.out.println(i+1 + " - " + plugins[i].split("\\.")[0]);
            jars[i] = (new File("./plugins/" + plugins[i])).toURL();
        }
        
        URLClassLoader ulc = new URLClassLoader(jars);
        String nomeFabrica;
        
        for (String plugin : plugins) {
            nomeFabrica = plugin.split("\\.")[0];
            Class metaClass = Class.forName(nomeFabrica.toLowerCase() + "." + nomeFabrica, true, ulc);
            Method method = metaClass.getDeclaredMethod("getInstance");
            if (method != null)
                factories.add ((IIDEFactory) method.invoke(null));
            //factories.add((IIDEFactory) Class.forName(nomeFabrica.toLowerCase() + "." + nomeFabrica, true, ulc).newInstance());
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainWindow tela = new MainWindow();
            tela.setLocationRelativeTo(null);
            tela.setVisible(true);
        });
    }    
   
    private File selectedFile;
    private String extensionFile;
    private IIDEFactory myFactory;
    private static final ArrayList<IIDEFactory> factories = new ArrayList<IIDEFactory>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem compileItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenuItem openItem;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/app.png")));

    }
}
